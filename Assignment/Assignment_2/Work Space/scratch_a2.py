import sys
self_sudoku =[
        [None,     3,    9,    5, None, None, None, None, None],
        [None,  None,    1,    8, None,    9, None,    7, None],
        [None,  None, None, None,    1, None,    9, None,    4],
        [   1,  None, None,    4, None, None, None, None,    3],
        [None,  None, None, None, None, None, None, None, None],
        [None,  None,    7, None, None, None,    8,    6, None],
        [None,  None,    6,    7, None,    8,    2, None, None],
        [None,     1, None, None,    9, None, None, None,    5],
        [None,  None, None, None, None,    1, None, None,    8]
        ]

#preemptive_dict={(0,0): [{2, 4, 6, 7, 8}, (0, 0), (0, 4), (0, 5)], (0, 4): [{2, 4, 6, 7}, (0, 4), (0, 5)], (0, 5): [{2, 4, 6, 7}, (0, 4), (0, 5)], (0, 6): [{1, 6}, (0, 6)], (0, 7): [{8, 1, 2}, (0, 7)], (0, 8): [{1, 2, 6}, (0, 6), (0, 8), (1, 8)], (1, 0): [{2, 4, 5, 6}, (1, 0), (1, 1), (1, 8)], (1, 1): [{2, 4, 5, 6}, (1, 0), (1, 1), (1, 8)], (1, 4): [{2, 3, 4, 6}, (1, 4), (2, 3), (1, 8)], (1, 6): [{3, 5, 6}, (1, 6)], (1, 8): [{2, 6}, (1, 8)], (2, 0): [{2, 5, 6, 7, 8}, (2, 0), (2, 1), (2, 2)], (2, 1): [{2, 5, 6, 7, 8}, (2, 0), (2, 1), (2, 2)], (2, 2): [{8, 2, 5}, (2, 2), (3, 2)], (2, 3): [{2, 3, 6}, (2, 3), (7, 3), (8, 3)], (2, 5): [{2, 3, 6, 7}, (2, 3), (2, 5)], (2, 7): [{8, 2, 3, 5}, (2, 7), (2, 2)], (3, 1): [{2, 5, 6, 8, 9}, (3, 1), (3, 2), (3, 7)], (3, 2): [{8, 2, 5}, (3, 2), (2, 2)], (3, 4): [{2, 5, 6, 7, 8}, (3, 4), (3, 5), (3, 2), (3, 6)], (3, 5): [{2, 5, 6, 7}, (3, 5), (3, 6)], (3, 6): [{5, 7}, (3, 6)], (3, 7): [{9, 2, 5}, (3, 7)], (4, 0): [{2, 3, 4, 5, 6, 8, 9}, (3, 1), (3, 2), (4, 0), (4, 1), (4, 2), (5, 0), (5, 1), (1, 0), (6, 0)], (4, 1): [{2, 4, 5, 6, 8, 9}, (3, 1), (3, 2), (4, 1), (5, 1), (1, 1), (6, 1)], (4, 2): [{2, 3, 4, 5, 8}, (3, 2), (4, 2), (2, 2), (7, 2), (8, 2)], (4, 3): [{1, 2, 3, 6, 9}, (4, 3), (5, 3), (2, 3), (7, 3), (8, 3)], (4, 4): [{2, 3, 5, 6, 7, 8}, (3, 4), (3, 5), (4, 4), (4, 5), (5, 4), (5, 5)], (4, 5): [{2, 3, 5, 6, 7}, (3, 5), (4, 5), (5, 4), (5, 5), (2, 5)], (4, 6): [{1, 4, 5, 7}, (3, 6), (4, 6)], (4, 7): [{1, 2, 4, 5, 9}, (3, 7), (4, 7), (5, 8)], (4, 8): [{1, 2, 9, 7}, (4, 8), (5, 8), (6, 8)], (5, 0): [{2, 3, 4, 5, 9}, (5, 0), (5, 1), (6, 0), (5, 4), (5, 5)], (5, 1): [{9, 2, 4, 5}, (5, 1), (6, 1)], (5, 3): [{1, 2, 3, 9}, (5, 3), (5, 8)], (5, 4): [{2, 3, 5}, (5, 4), (5, 5)], (5, 5): [{2, 3, 5}, (5, 4), (5, 5)], (5, 8): [{1, 2, 9}, (5, 8), (6, 8)], (6, 0): [{9, 3, 4, 5}, (6, 0), (6, 1), (6, 4)], (6, 1): [{9, 4, 5}, (6, 1)], (6, 4): [{3, 4, 5}, (6, 4)], (6, 7): [{1, 3, 4, 9}, (6, 7), (6, 8), (7, 7), (8, 7)], (6, 8): [{1, 9}, (6, 8)], (7, 0): [{2, 3, 4, 7, 8}, (7, 0), (7, 2), (7, 7)], (7, 2): [{8, 2, 3, 4}, (7, 2), (7, 7)], (7, 3): [{2, 3, 6}, (7, 3), (8, 3), (2, 3)], (7, 5): [{2, 3, 4, 6}, (7, 3), (7, 5), (8, 3), (7, 7)], (7, 6): [{3, 4, 6, 7}, (7, 6), (7, 7), (8, 6)], (7, 7): [{3, 4}, (7, 7)], (8, 0): [{2, 3, 4, 5, 7, 9}, (6, 0), (6, 1), (8, 0), (8, 1), (8, 2), (5, 0), (8, 7)], (8, 1): [{2, 4, 5, 7, 9}, (6, 1), (8, 1), (5, 1)], (8, 2): [{2, 3, 4, 5}, (8, 2)], (8, 3): [{2, 3, 6}, (7, 3), (8, 3), (2, 3)], (8, 4): [{2, 3, 4, 5, 6}, (6, 4), (7, 3), (7, 5), (8, 3), (8, 4), (1, 4), (5, 4), (8, 2)], (8, 6): [{3, 4, 6, 7}, (7, 6), (7, 7), (8, 6)], (8, 7): [{9, 3, 4}, (7, 7), (8, 7)]}
option_dict={(0, 0): [2, -4, 6, 7, 8], (0, 4): [2, -4, 6, 7], (0, 5): [2, -4, 6, 7], (0, 6): [1, 6], (0, 7): [8, 1, 2], (0, 8): [1, 2, 6], (1, 0): [2, -4, 5, 6], (1, 1): [2, -4, 5, 6], (1, 4): [2, 3, -4, 6], (1, 6): [3, 5, 6], (1, 8): [2, 6], (2, 0): [2, 5, 6, 7, 8], (2, 1): [2, 5, 6, 7, 8], (2, 2): [8, 2, 5], (2, 3): [2, 3, 6], (2, 5): [2, 3, 6, 7], (2, 7): [8, 2, 3, 5], (3, 1): [2, 5, 6, 8, 9], (3, 2): [8, 2, 5], (3, 4): [2, 5, 6, 7, 8], (3, 5): [2, 5, 6, 7], (3, 6): [5, 7], (3, 7): [9, 2, 5], (4, 0): [2, 3, 4, 5, 6, 8, 9], (4, 1): [2, 4, 5, 6, 8, 9], (4, 2): [2, 3, 4, 5, 8], (4, 3): [1, 2, 3, 6, 9], (4, 4): [2, 3, 5, 6, 7, 8], (4, 5): [2, 3, 5, 6, 7], (4, 6): [1, 4, 5, 7], (4, 7): [1, 2, 4, 5, 9], (4, 8): [1, 2, 9, 7], (5, 0): [2, 3, 4, 5, 9], (5, 1): [9, 2, 4, 5], (5, 3): [1, 2, 3, 9], (5, 4): [2, 3, 5], (5, 5): [2, 3, 5], (5, 8): [1, 2, 9], (6, 0): [9, 3, 4, 5], (6, 1): [9, 4, 5], (6, 4): [3, 4, 5], (6, 7): [1, 3, 4, 9], (6, 8): [1, 9], (7, 0): [2, 3, 4, 7, 8], (7, 2): [8, 2, 3, 4], (7, 3): [2, 3, 6], (7, 5): [2, 3, 4, 6], (7, 6): [3, 4, 6, 7], (7, 7): [3, 4], (8, 0): [2, 3, 4, 5, 7, 9], (8, 1): [2, 4, 5, 7, 9], (8, 2): [2, 3, 4, 5], (8, 3): [2, 3, 6], (8, 4): [2, 3, 4, 5, 6], (8, 6): [3, 4, 6, 7], (8, 7): [9, 3, 4]}
header=r'''\documentclass[10pt]{article}
\usepackage[left=0pt,right=0pt]{geometry}
\usepackage{tikz}
\usetikzlibrary{positioning}
\usepackage{cancel}
\pagestyle{empty}

\newcommand{\N}[5]{\tikz{\node[label=above left:{\tiny #1},
                               label=above right:{\tiny #2},
                               label=below left:{\tiny #3},
                               label=below right:{\tiny #4}]{#5};}}

\begin{document}

\tikzset{every node/.style={minimum size=.5cm}}

\begin{center}
\begin{tabular}{||@{}c@{}|@{}c@{}|@{}c@{}||@{}c@{}|@{}c@{}|@{}c@{}||@{}c@{}|@{}c@{}|@{}c@{}||}\hline\hline'''

footer=r'''\end{tabular}
\end{center}

\end{document}
'''

a=10
cancel_header='\cancel{'
cancel_footer='}'
row_list=[]

primary_set=[1,2,3,4,5,6,7,8,9]

filename='sudoku_1'+'.tex'
with open(filename, 'a') as fstream:
    fstream.write(header)
    for row in range(9):
        row_list = ['','','','','','','','','']
        markup = [['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''],
                  ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''],
                  ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''],
                  ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''],
                  ['', '', '', '', '', '', '', '', '']]
        for column in range(9):
            if self_sudoku[row][column] in primary_set:
                row_list[column]=self_sudoku[row][column]
            else:
                try:
                    #temp_list=preemptive_dict[(row,column)][0]
                    for option in option_dict[(row,column)]:
                        if option < 0:
                            markup[column][option-1]=cancel_header+str(abs(option))+cancel_footer
                        else:
                            markup[column][option-1]=abs(option)
                except KeyError:
                    print(f'({row},{column}) missing')
                    sys.exit()
        ending=''
        if (row+1)%3==0:
            ending='\hline'
        fstream.write(f'% Line {row} \n\\N {{{markup[0][0]} {markup[0][1]}}}{{{markup[0][2]} {markup[0][3]}}}{{{markup[0][4]} {markup[0][5]}}}{{{markup[0][6]} {markup[0][7]} {markup[0][8]}}}{{{row_list[0]}}} & \\N {{{markup[1][0]} {markup[1][1]}}}{{{markup[1][2]} {markup[1][3]}}}{{{markup[1][4]} {markup[1][5]}}}{{{markup[1][6]} {markup[1][7]} {markup[1][8]}}}{{{row_list[1]}}} & \\N {{{markup[2][0]} {markup[2][1]}}}{{{markup[2][2]} {markup[2][3]}}}{{{markup[2][4]} {markup[2][5]}}}{{{markup[2][6]} {markup[2][7]} {markup[2][8]}}}{{{row_list[2]}}} &\n\\N {{{markup[3][0]} {markup[3][1]}}}{{{markup[3][2]} {markup[3][3]}}}{{{markup[3][4]} {markup[3][5]}}}{{{markup[3][6]} {markup[3][7]} {markup[3][8]}}}{{}} & \\N {{{markup[4][0]} {markup[4][1]}}}{{ {markup[4][2]} {markup[4][3]} }}{{ {markup[4][4]} {markup[4][5]} }}{{ {markup[4][6]} {markup[4][7]} {markup[4][8]} }}{{{row_list[4]}}} & \\N {{{markup[5][0]} {markup[5][1]}}}{{{markup[5][2]} {markup[5][3]}}}{{{markup[5][4]} {markup[5][5]}}}{{{markup[5][6]} {markup[5][7]} {markup[5][8]}}}{{{row_list[5]}}} &\n\\N {{{markup[6][0]} {markup[6][1]}}}{{{markup[6][2]} {markup[6][3]}}}{{{markup[6][4]} {markup[6][5]}}}{{{markup[6][6]} {markup[6][7]} {markup[6][8]}}}{{{row_list[6]}}} & \\N {{{markup[7][0]} {markup[7][1]}}}{{{markup[7][2]} {markup[7][3]}}}{{{markup[7][4]} {markup[7][5]}}}{{{markup[7][6]} {markup[7][7]}}}{{{row_list[7]}}} & \\N {{{markup[8][0]} {markup[8][1]}}}{{{markup[8][2]} {markup[8][3]}}}{{{markup[8][4]} {markup[8][5]}}}{{{markup[8][6]} {markup[8][7]}}}{{{row_list[8]}}} \\\ \hline{ending}')
    fstream.write(footer)